{"version":3,"sources":["components/AddTask.js","components/SearchTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","state","text","checked","handleText","e","_this","setState","target","value","handleClick","preventDefault","props","addTask","console","log","handleKey","charCode","length","react_default","a","createElement","className","type","placeholder","this","onChange","onKeyPress","onClick","class","Component","SearchTask","handleSearch","prevProps","prevState","searchTask","Task","handleCheckTask","id","handleDeleteTask","TaskList","tasks","map","task","components_Task","key","App","idCounter","taskCounter","filtered","textFromSearch","concat","Object","toConsumableArray","filter","toLocaleLowerCase","includes","taskCounterChangeWhenDeleting","alert","newTasksList","checkedTaskList","checkedTaskCounter","components_SearchTask","components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3ec046c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n/* import '../AddTask.scss'; */\r\nimport '../styles/AddTask.scss';\r\n\r\nclass AddTask extends Component {\r\n    state = {\r\n        text: '',\r\n        checked: false,\r\n    }\r\n\r\n    //metoda sluzaca do pobrania tekstu wpisywanego w input odpowiadajacy za dodanie\r\n    handleText = (e) => {\r\n        this.setState({\r\n            text: e.target.value,\r\n        })\r\n    }\r\n\r\n    //metoda obslugujaca przycisk Dodaj\r\n    handleClick = (e) => {\r\n        e.preventDefault(); //bo uzywam form, gdy uzywalem div nie mialem tego i eventu\r\n        const addTask = this.props.addTask(this.state.text, this.state.checked);\r\n        if (addTask) {\r\n            this.setState({\r\n                text: '',\r\n                checked: false,\r\n            })\r\n        }\r\n        else {\r\n            console.log('Error');\r\n        }\r\n    }\r\n\r\n    //Dodanie taska za pomoca nacisniecia klawisza enter, czyli jesli klawisz sie zgadza uruchom metode handleClick\r\n    handleKey = (e) => {\r\n        if (e.charCode === 13 && this.state.text.length > 0) {\r\n            this.handleClick(e) //tu dodatkowo musze jeszcze przekazac e(event), wczesniej tego nie mialem, ale jakbym tego e nie mial, to bym mial blad, przy kliknieciu by przeszlo, ale przy uzyciu enter mialbym blad\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            //jak mam to w form to w sumie ten handleKey nie jest potrzebny, potrzebny jest jak mam div, ale zostawie te metode i cale dzialanie, dla przypomnienia\r\n            <form className=\"addTaskPanel\">\r\n                <input className=\"inputAddTask\" type=\"text\" placeholder='Insert your task...' value={this.state.text} onChange={this.handleText} onKeyPress={this.handleKey} />\r\n                <button className=\"buttonAddTask\" onClick={this.handleClick}>Add <i class=\"fas fa-plus\"></i></button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTask;","import React, { Component } from 'react';\r\n/* import '../SearchTask.scss' */\r\nimport '../styles/SearchTask.scss'\r\n\r\nclass SearchTask extends Component {\r\n    state = {\r\n        text: '',\r\n    }\r\n\r\n    handleSearch = (e) => {\r\n        this.setState({\r\n            text: e.target.value //tekst bedzie tym co wpisuje w inpucie search\r\n        })\r\n    }\r\n    //bo inaczej wyskoczy blad z zapetlaniem\r\n    //musze takim sposobem zrobic, bo inaczej jak wpisze np: a to uzna to za puste, jak wpisze kolejna litera to dopiero odniesie sie do a, ktore jest poprzednie, a chce aktualna wartosc \r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.text !== this.state.text) { //zeby sie nie bylo bledu z zapetlaniem jesli poprzedni stan rozni sie od aktualnego do doknaj aktualizacji\r\n            this.props.searchTask(this.state.text);\r\n        }\r\n    }\r\n\r\n    //wczesniej\r\n    /*     handleSearch = (e) => {\r\n            this.setState({\r\n                text: e.target.value\r\n            })\r\n            this.props.searchTask(this.state.text);\r\n        } */\r\n\r\n    render() {\r\n        return (\r\n            //gdy mam to w form zamiast w div to jak klikne w inpucie search i nacisne enter to odswiezy strone\r\n            <div className=\"searchPanel\">\r\n                <input className=\"inputSearch\" type=\"text\" placeholder='Search your task...' value={this.state.text} onChange={this.handleSearch} />\r\n                {/* <input type=\"text\" placeholder='wyszukaj' value={this.state.text} onChange={this.handleText} /> */}\r\n                {/* <button onClick={this.handleSearch}>Szukaj</button> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchTask;","import React from 'react';\r\n/* import '../Task.scss'; */\r\nimport '../styles/Task.scss';\r\n\r\nconst Task = (props) => {\r\n\r\n    /*     const style = {\r\n            textDecoration: 'line-through',\r\n        } */\r\n\r\n    return (\r\n        <form className=\"taskItemContainer\">\r\n            <li className=\"taskItem\" onClick={() => props.handleCheckTask(props.id)} >\r\n                <strong className={props.checked ? 'checkItem' : null}>{props.text}</strong>\r\n                {/* <strong style={props.checked ? style : null}>{props.text}</strong> */}\r\n            </li>\r\n            <button className=\"removeTaskItemButton\" onClick={() => props.handleDeleteTask(props.id)}></button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './Task';\r\n/* import '../TaskList.scss'; */\r\nimport '../styles/TaskList.scss';\r\n\r\nconst TaskList = (props) => {\r\n\r\n    const tasks = props.tasks.map(task => <Task key={task.id} text={task.text} id={task.id} checked={task.checked} handleDeleteTask={props.handleDeleteTask} handleCheckTask={props.handleCheckTask} />);\r\n    return (\r\n        <div className=\"taskListPanel\">\r\n            <ul className=\"taskList\">{tasks}</ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskList;","import React, { Component } from 'react';\n/* import '../App.scss'; */\nimport '../styles/App.scss';\nimport AddTask from './AddTask';\nimport SearchTask from './SearchTask';\nimport TaskList from './TaskList';\n\n\n\nclass App extends Component {\n\n  idCounter = 0;   //licznik indeksow przy add potrzebne, ze jak dodam to zwieksz licznik o jeden, zeby kolejny mial unikalny indeks\n  taskCounter = 0; //licznik sluzacy do wyswietlenia ile mam taskow\n  state = {\n    tasks: [],\n    filtered: [],   //tu beda pofiltrowane taski\n    textFromSearch: '', //tekst, ktory zostal wpisany w inpucie\n  }\n\n  handleDeleteTask = (id) => {\n    console.log('Tekst to');\n    console.log(this.state.textFromSearch);\n    console.log(`działa ${id}`);\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter(task => task.id !== id);\n    this.setState({\n      tasks: tasks,\n    })\n\n    //chce zrobic zeby filtered mial te taski, ktore zawieraja litere z inputa\n    //textFromSearch to litera/slowo z inputa dotyczacego wyszukiwania\n    //filtered niech zawiera te taski, ktore zawieraja jakas litere z tego co zostalo wpisane w inpucie wyszukiwania\n    //dzieki temu jesli mam rok, bork, ada w tasks i w inpucie wyszukiwania wpisze k, to wyskoczy mi rok i bork, nastepnie jak usune rok, a w inpucie wyszukiwania bedzie nadal k, to pojawi mi sie jeszcze bork, a jakbym mial filtered: tasks, to by sie pojawilo wszystko, czyli oprocz bork, jeszcze ada\n    this.setState({\n      filtered: tasks.filter(task => task.text.toLocaleLowerCase().includes(this.state.textFromSearch))\n    })\n\n    //zeby bylo prawidlowe usuwanie z licznika, tutaj jest tak, ze jesli zaznaczony jest task (ze skreslony) i nacisne usun to licznik sie nie zmniejszy dodatkowo, bo najpierw u mnie pojedyncze skreslenie powoduje, ze licznik zmniejsza sie o jeden i jak jeszcze usune to licznik by sie dodatkowo zmniejszyl o jeden a tak nie chce, te rozwiazanie jest powiazane z tym w search (Oznaczenie #2), czyli jak zaznacze tak (skresle go) to pomniejsz licznik o jeden, a jak nacisne przy nim usun, to nie usuwaj juz z licznika jeszcze jeden raz zostaw ten licznik jaki jest, jesli nie jest zaznaczony to normalnie pomniejsz licznik o jeden\n\n    //w skrocie:\n    //a tutaj sprawdz, przy klikanym tasku czy jest on niezaznaczony, jak nie jest zaznaczony to przy usuwaniu pomniejsz licznik o jeden, a jak jest to nie zmieniaj licznika\n    let taskCounterChangeWhenDeleting = [...this.state.filtered]  //z deleteTaskss na taskCounterChangeWhenDeleting /taskCounterForCheckedTrue\n    taskCounterChangeWhenDeleting = taskCounterChangeWhenDeleting.filter(task => task.id === id); //pobranie dokladnie kliknietego taska przy usunieciu\n    console.log(\"taskiiii\")\n    //i jesli ten usuwany ma checked ustawiony na false to zmniejsz licznik o jeden\n    taskCounterChangeWhenDeleting = taskCounterChangeWhenDeleting.map(task => {\n      if (task.checked === false) {\n        this.taskCounter--\n      } else {\n        this.taskCounter = this.taskCounter //jak jest true to nie zmieniaj licznika\n      }\n      return taskCounterChangeWhenDeleting\n    })\n\n  }\n\n  //metoda, sluzaca do zmiany stanu checked na true i false, zeby mozna bylo je przekreslic pozniej\n  handleCheckTask = (id) => {\n    console.log(`checked`);\n    console.log(`działa ${id}`)\n    const tasks = this.state.tasks.map(task => {\n      if (id === task.id) {\n        task.checked = !task.checked;\n      }\n      //odpowiadajace za countera z checkiem\n      if (id === task.id) {\n        if (task.checked === false) {\n          this.taskCounter += 1;\n        } else {\n          this.taskCounter -= 1;\n        }\n      }\n      //koniec\n      return task;\n    })\n    this.setState({\n      tasks,\n    })\n  }\n\n  addTask = (text, checked) => {\n    if (text !== '') {\n      const task = {\n        id: this.idCounter,\n        text: text,\n        checked: checked,\n      }\n      this.idCounter++;\n      this.taskCounter++;\n      this.setState(prevState => ({\n        tasks: [...prevState.tasks, task]\n      }))\n\n      //w filtered ustaw ten sam stan co w tablicy tasks\n      this.setState(prevState => ({\n        filtered: prevState.tasks\n      }))\n\n    } else {\n      alert(\"You must type something if you want to add a task\");\n    }\n    return true\n  }\n\n\n  searchTask = text => {\n    this.setState({\n      textFromSearch: text //ustawia textFromSearch na text pobrany z inputa search\n    })\n    let actualTasksList = [];   //currentTodos na actualTodoList albo actualTasksList\n    let newTasksList = [];        //newList na newTasksList\n    if (text !== \"\") {\n      actualTasksList = this.state.tasks; //pobierz wszystkie dodane, pobierz wszystkie taski jakie sa\n      newTasksList = actualTasksList.filter(task => {\n        console.log(task.text.includes(text))\n        return task.text.toLocaleLowerCase().includes(text.toLocaleLowerCase()) //newTasksList zawiera true lub false, jesli zanalazl lub nie znalazl, w newTasksList sa teraz taski, ktore sa zgodne z tym czego szukalem\n      })\n    } else {\n      newTasksList = this.state.tasks; //jesli nic nie szukamy to zwroc stara tablice (jak jest pusta)\n    }\n    this.setState({\n      filtered: newTasksList,  //filtered zawiera teraz elementy z newTasksList (jesli cos znalazl lub nie)\n    });\n\n    //robione po to, aby licznik pokazywal tyle ile mam taskow, ale rowniez, ze jak zaznacze taska (ze skreslony) to zeby z licznika to odjelo\n    //Jesli zaznacze w search taski (ze skreslony) to licznik sie zmniejszy o te skreslone i jesli wyjde z tego searcha na glowne okno to chce zeby wzial pod uwage te skreslenia do licznika, bez tego nie wezmie pod uwage\n    //Oznaczenie tego #S\n    let checkedTaskList = [];    //toCounter na checkedTaskList\n    checkedTaskList = newTasksList;\n    let checkedTaskCounter = 0;\n    checkedTaskList = checkedTaskList.map(task => {\n      if (task.checked === true) {\n        checkedTaskCounter += 1;\n      }\n      return checkedTaskList;\n    })\n    console.log('ToCounter')\n    console.log(checkedTaskCounter)\n    console.log(checkedTaskList.length)\n    console.log(checkedTaskList)\n    this.taskCounter = newTasksList.length - checkedTaskCounter//- toCounter.length - checkTaskCounter //- this.checkTaskCounter //czyli taskCounter rowna sie temu ile elementow mi z wyszukiwania wyskoczy minus tyle ile czeknalem\n    console.log(text);\n\n  };\n\n\n  render() {\n\n    console.log(this.taskCounter)\n    console.log(this.state.tasks)\n    console.log(this.state.filtered)\n    return (\n      <div className=\"container\">\n        <h1 className='toDoList-h1'>To Do List</h1>\n        {/* licznik niech sie wyswietla dopiero kiedy jest w takCounter wiecej niz 0 */}\n        {this.taskCounter > 0 ? <p className=\"taskCounter\">Tasks: {this.taskCounter}</p> : null}\n        <SearchTask searchTask={this.searchTask} />\n        <AddTask addTask={this.addTask} />\n        {/* tasks={this.state.filtered} jest to zamiast tasks={this.state.tasks} bo chce, zeby mapowal po przefiltrowanej liscie*/}\n        <TaskList tasks={this.state.filtered} handleDeleteTask={this.handleDeleteTask} handleCheckTask={this.handleCheckTask} />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}